---
AWSTemplateFormatVersion: 2010-09-09
Description: Buildkite EventBridge SQS

Parameters:
  EventBridgeBusName:
    Type: String
    Description: Name of an EventBridge Bus in this region that receives Buildkite Partner Events, see https://buildkite.com/docs/integrations/amazon-eventbridge.
    AllowedPattern: ^[a-zA-Z0-9\-\._/]+

Resources:
  Queue:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: true
      ContentBasedDeduplication: true
      MessageRetentionPeriod: 86400
  QueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "SQS:*"
            Resource: !GetAtt Queue.Arn
          - Effect: Allow
            Principal:
              Service: "events.amazonaws.com"
            Action: "sqs:SendMessage"
            Resource: !GetAtt Queue.Arn
      Queues:
        - !Ref Queue

  QueueRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Store Build Finished events on the SQS queue for creating GitHub Status events.
      EventBusName: !Ref EventBridgeBusName
      EventPattern:
        account:
          - !Ref AWS::AccountId
        detail-type:
          - "Build Finished"
      Targets:
        - Id: Queue
          Arn: !GetAtt Queue.Arn
          InputPath: $.detail
          SqsParameters:
            MessageGroupId: BuildFinished

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      ApiKeySourceType: HEADER
      Name: !Ref AWS::StackName

  MessageResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: "message"
      RestApiId: !Ref ApiGateway

  ReceiveMessage:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: true
      AuthorizationType: NONE
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref MessageResource
      HttpMethod: GET
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          StatusCode: '200'
      Integration:
        Type: AWS
        Uri:
          !Sub
            - "arn:aws:apigateway:${AWS::Region}:sqs:path/${AWS::AccountId}/${QueueName}"
            - QueueName: !GetAtt Queue.QueueName
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: '200'
        RequestParameters:
          integration.request.header.Content-Type: '''application/x-www-form-urlencoded'''
        RequestTemplates:
          application/json: 'Action=ReceiveMessage'

  DeleteMessage:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: true
      AuthorizationType: NONE
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref MessageResource
      HttpMethod: DELETE
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          StatusCode: '200'
      Integration:
        Type: AWS
        Uri:
          !Sub
            - "arn:aws:apigateway:${AWS::Region}:sqs:path/${AWS::AccountId}/${QueueName}"
            - QueueName: !GetAtt Queue.QueueName
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: '200'
        RequestParameters:
          integration.request.header.Content-Type: '''application/x-www-form-urlencoded'''
        RequestTemplates:
          application/json: 'Action=DeleteMessage&ReceiptHandle=$util.urlEncode($input.params(''receiptHandle''))'

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ReceiveMessage
      - DeleteMessage
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: Prod

Outputs:
  Queue:
    Value: !GetAtt Queue.Arn
  QueueUrl:
    Value: !Ref Queue
  ApiUrl:
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
